<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-10-05T14:49:21+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">thekingofcool’s qqzone</title><entry><title type="html">此时不搏，更待何时？</title><link href="http://localhost:4000/blog/2024/09/27/higher_highs.html" rel="alternate" type="text/html" title="此时不搏，更待何时？" /><published>2024-09-27T00:00:00+08:00</published><updated>2024-09-27T00:00:00+08:00</updated><id>http://localhost:4000/blog/2024/09/27/higher_highs</id><content type="html" xml:base="http://localhost:4000/blog/2024/09/27/higher_highs.html"><![CDATA[<p>一切运动式行为都不倾向于有好的结果，好结果的背后通常是实事求是、以人为本为出发点。</p>

<p>这周二以来，中国央行出了两个政策，一个是将存量房贷利率下调0.5%、降低二套住房首付比例；第二是针对股市，为企业提供股票回购再贷款、允许有资质企业用股票和央行置换国债，卖出国债继续买入股票。加上昨天召开的政治局会议中透露出要促进房地产止跌回稳。一连串政策通知，让上证指数三天从2700多冲上3000点。港股、美股中概也复制了疯狂行情，外资接连唱多。</p>

<p>发展经济要真这么简单就好了，借钱给企业买股票就能使经济繁荣，左脚踩右脚想要跳得更高。运动式行情可以刺激短期经济，市场上确实也缺这种活力。但问题不在于这些刺激政策是否正确，而在于后续能否有更多保障民生的就业、住房、医疗、养老等和人民群众利益切实相关的改革措施跟上。能否真正提高人民收入、改善未来预期。否则，可能又是一次击鼓传花的游戏，钱最终流向了不缺钱的人。</p>

<p>历史经验告诉我们，在这种疯狂中唯一能做的就是做好自己的事，观察，冷静做下任何决定。</p>]]></content><author><name></name></author><category term="blog" /><summary type="html"><![CDATA[一切运动式行为都不倾向于有好的结果，好结果的背后通常是实事求是、以人为本为出发点。]]></summary></entry><entry><title type="html">About Running</title><link href="http://localhost:4000/blog/2024/09/25/about_running.html" rel="alternate" type="text/html" title="About Running" /><published>2024-09-25T00:00:00+08:00</published><updated>2024-09-25T00:00:00+08:00</updated><id>http://localhost:4000/blog/2024/09/25/about_running</id><content type="html" xml:base="http://localhost:4000/blog/2024/09/25/about_running.html"><![CDATA[<p>Q: 你为什么会开始跑步？（与其说开始跑，突破极限的感觉）</p>

<p>A: 在我看来，跑步是所有运动的基础，任何体育项目要想有优异的表现都需要有足够的体能储备。所以与其说我为什么开始跑步，不如说我顺其自然地去跑了步。另外，当突破自己身体极限之后给我的感觉非常舒服。</p>

<p>Q: 跑步给你带来了什么？（枯燥，talking to myself，最重要的资产）</p>

<p>A: 跑步，特别是长跑，是一项枯燥的运动，这也是以前很多年轻群体不会把跑步作为首选运动的原因，但是我想说，跑步的好处之一，就是可以有个机会与自己的身体、内心进行交流。跑步给我带来了一副强大的身体和意志，这是我在任何情况下最重要的资产。</p>

<p>Q: 跑步让你生活有什么改变？（好的状态，高效生活工作，不会退缩）</p>

<p>A: 跑步让我的身体能保持一个好的状态，让我的工作和生活都更加高效。当一个人和自己的身体达成了共识，生活中还有什么困难能真正让他退缩呢？</p>

<p>Q: 一个人跑和一群人跑区别？（了解自己，鼓励、建议，特殊的满足感）</p>

<p>A: 一个人跑是一个和自己对话、更了解自己的过程。而一群人跑则可以相互鼓励，训练时遇到的瓶颈和可能的问题也能得到团队有效的建议。另外，在团队中获得成就也更能带来一种特殊的满足感。</p>

<p>Q: 跑步的目标？（更好的生活，感染身边的人，pb 水到渠成）</p>

<p>A: 就我个人而言，跑步的首要目标是为了能更好地生活，如果能带动身边的家人、同事一起养成健康的生活方式那就更好了。至于pb嘛，当你充分训练了，那是水到渠成的事。</p>

<p>Q: 跑步得到了什么？（一口气上五楼）</p>

<p>A: 一口气上五楼，不费劲儿。</p>]]></content><author><name></name></author><category term="blog" /><summary type="html"><![CDATA[Q: 你为什么会开始跑步？（与其说开始跑，突破极限的感觉）]]></summary></entry><entry><title type="html">日本人学校遇害学生父亲的信</title><link href="http://localhost:4000/reading/2024/09/21/japanese_children_in_china.html" rel="alternate" type="text/html" title="日本人学校遇害学生父亲的信" /><published>2024-09-21T00:00:00+08:00</published><updated>2024-09-21T00:00:00+08:00</updated><id>http://localhost:4000/reading/2024/09/21/japanese_children_in_china</id><content type="html" xml:base="http://localhost:4000/reading/2024/09/21/japanese_children_in_china.html"><![CDATA[<p>2024年6月24日，中国苏州，一辆载有放学回家的日本孩子的校车抵达距学校近一公里外的车站时，一位 “不清楚作案动机” 的52岁男子试图上车袭击学生，55岁的校车乘务员胡友平在阻拦过程中被刺身亡。</p>

<p>2024年9月18日，中国深圳，一名5年级日本男学生在距离学校200米处，遭一名44岁中国男子持刀袭击，经抢救无效死亡。</p>

<p>前一个事件以“宣扬胡友平英勇无畏、弘扬社会正气”为终，后一个事件以“就核废水排海达成共识，中国恢复进口日本水产”试图画上句号。当然它们会有一个共同点，那就是和东航737客机坠毁一样，永远等不到官方调查通报。</p>

<p>昨天还观察到一个事情，遇害男学生的父亲小山纯平的一封写给领事馆的信的截图在中文互联网被大面积移除。</p>

<p>我很好奇，他们何以心虚至此，以至于如此义无反顾地站在人类良善、同理及一切进步的品质的对立面。以及浩浩荡荡的义和团运动和人类踏上火星开启多星系物种时代，哪一个会先到来？</p>

<p>做个记录。</p>

<p>形势一片大好，不是小好，是大好。一切正越来越好。</p>

<blockquote>
  <p>力石先生、古家先生</p>

  <p>感谢您昨日一直陪伴到很晚。</p>

  <p>关于领事馆和公司的评论，您可以自行决定。但我还是希望您能了解我的心情，因此写下了这封信。或许更多是为了整理我的情绪，可能有些地方写得不够好，还请见谅。是否转发、以及转发给谁，都请您自由决定。</p>

  <p>航平非常喜欢昆虫和爬行动物，是个拥有独特眼力，能发现任何小生物的孩子。他拥有比任何人都更为温柔的心灵。从小就喜欢画画，是一个对语言很有天赋的孩子，能够流利地使用日语和中文。</p>

  <p>他一直对随我前往深圳的安排感到犹豫不决。由于偏食，他一开始很难适应当地的饮食，但最近，他喜欢上了越来越多的中国食物，并且迷上了刚刚开始的篮球运动。</p>

  <p>他如此突然地离开了我们，我完全没有料到。现在，我的内心充满了困惑和无尽的悲痛。我再也无法看到他如何成长，如何成为大人。无法保护他，这将成为我一生都无法释怀的悔恨。</p>

  <p>航平既是日本人，也是中国人。他的母亲是中国人，曾在日本生活了近十年；他的父亲是一个已经在中国度过了将近一半人生的日本人。航平本人三岁前的大部分时间都是在中国妻子的家中度过的。无论外界如何报道，他拥有日本和中国两国根源的事实不会改变。</p>

  <p>我们不会憎恨中国，同样，我们也不会憎恨日本。</p>

  <p>无论国籍为何，我们都将这两个国家视为自己的国家。尽管风俗和文化存在差异，但我们比谁都清楚，大家都是一样的人。因此，我不希望由极少数持扭曲思想的卑劣之人的罪行，来破坏两国的关系。我唯一的愿望就是，这样的悲剧不再重演。</p>

  <p>航平曾经有一次对我说：“将来想成为像爸爸一样的人。”或许这只是一时的心血来潮，但作为父亲，这句话让我无比欣慰。我从事中日贸易的工作，担任着日本和中国之间的桥梁。我的主要职责是弥合双方的认知差异，促进顺畅的沟通。</p>

  <p>如果没有发生这次不幸的事件，我相信他一定会成为比我更有用的人。但现在，我只能尽全力成为一个他可以为之自豪的人，并且，继续为日中两国的相互理解作出微小的贡献，这既是对我最爱的儿子的赎罪，也是对犯人的报复。</p>

  <p>最重要的是，我想对航平表示感激，感谢他让我们成为父母，感谢他在我们身边度过了10年8个月又7天的时光。我们将会继续坚强地生活下去，为他，继续走完他未完成的路。</p>

  <p>小山纯平</p>
</blockquote>]]></content><author><name></name></author><category term="reading" /><summary type="html"><![CDATA[2024年6月24日，中国苏州，一辆载有放学回家的日本孩子的校车抵达距学校近一公里外的车站时，一位 “不清楚作案动机” 的52岁男子试图上车袭击学生，55岁的校车乘务员胡友平在阻拦过程中被刺身亡。]]></summary></entry><entry><title type="html">Hands on Delta Lake</title><link href="http://localhost:4000/go_big/2024/09/19/delta_lake.html" rel="alternate" type="text/html" title="Hands on Delta Lake" /><published>2024-09-19T00:00:00+08:00</published><updated>2024-09-19T00:00:00+08:00</updated><id>http://localhost:4000/go_big/2024/09/19/delta_lake</id><content type="html" xml:base="http://localhost:4000/go_big/2024/09/19/delta_lake.html"><![CDATA[<h3 id="what-is-delta-lake">What is Delta Lake</h3>
<p><a href="https://delta.io/">Delta Lake</a> 是一个开源的数据湖存储层 (lakehouse storage layer) 技术，它利用基于文件的事务日志 (file-based transaction log) 扩展了 <a href="https://parquet.apache.org/">Parquet</a> 数据文件，以实现 ACID 事务和可扩展的元数据处理。Delta Lake 与 Apache Spark API 完全兼容，专为与 Structured Streaming 集成而开发，可以很方便地对 batch &amp; streaming 数据进行处理。</p>

<p>Delta Lake 的主要优势是它对大规模数据处理的可靠性和一致性，同时提供了类似于传统数据库的事务功能。在使用过程中可以通过 Spark SQL 来读取、写入和管理 Delta Lake 中的数据。下面将这些功能一一演示。</p>

<h3 id="how-to-use-delta-lake">How to Use Delta Lake</h3>
<h4 id="install-delta-packege">Install Delta Packege</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>delta-spark<span class="o">==</span>2.1.0
</code></pre></div></div>

<h4 id="load-delta-related-jars-from-maven-repo">load delta related jars from maven repo</h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pyspark <span class="nt">--packages</span> io.delta:delta-core_2.12:2.1.0 <span class="se">\</span>
<span class="nt">--conf</span> <span class="s2">"spark.sql.extensions=io.delta.sql.DeltaSparkSessionExtension"</span> <span class="se">\</span>
<span class="nt">--conf</span> <span class="s2">"spark.sql.catalog.spark_catalog=org.apache.spark.sql.delta.catalog.DeltaCatalog"</span> <span class="se">\</span>
<span class="nt">--conf</span> <span class="s2">"hive.tez.input.format=io.delta.hive.HiveInputFormat"</span>
</code></pre></div></div>

<h4 id="set-up-a-python-project">Set up a Python Project</h4>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">delta</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="n">pyspark.sql</span> <span class="kn">import</span> <span class="n">SparkSession</span>

<span class="n">builder</span> <span class="o">=</span> <span class="n">SparkSession</span><span class="p">.</span><span class="n">builder</span><span class="p">.</span><span class="nf">appName</span><span class="p">(</span><span class="sh">"</span><span class="s">DeltaDemo</span><span class="sh">"</span><span class="p">)</span> \
    <span class="p">.</span><span class="nf">config</span><span class="p">(</span><span class="sh">"</span><span class="s">spark.sql.extensions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">io.delta.sql.DeltaSparkSessionExtension</span><span class="sh">"</span><span class="p">)</span> \
    <span class="p">.</span><span class="nf">config</span><span class="p">(</span><span class="sh">"</span><span class="s">spark.sql.catalog.spark_catalog</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">org.apache.spark.sql.delta.catalog.DeltaCatalog</span><span class="sh">"</span><span class="p">)</span>

<span class="n">spark</span> <span class="o">=</span> <span class="nf">configure_spark_with_delta_pip</span><span class="p">(</span><span class="n">builder</span><span class="p">).</span><span class="nf">getOrCreate</span><span class="p">()</span>
</code></pre></div></div>

<h4 id="create-a-table">Create a Table</h4>
<p><strong>1. Using Spark SQL DDL</strong></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">spark</span><span class="p">.</span><span class="nf">sql</span><span class="p">(</span><span class="sh">"""</span><span class="s">
create or replace table {your_database}.delta_demo(
    id int, 
    firstName string, 
    middleName string, 
    lastName string, 
    gender string, 
    birthDate date, 
    ssn string, 
    salary int)
using delta 
location </span><span class="sh">'</span><span class="s">s3://{S3_BUCKET}/delta_demo</span><span class="sh">'</span><span class="s">;
</span><span class="sh">"""</span><span class="p">)</span>

<span class="n">spark</span><span class="p">.</span><span class="nf">sql</span><span class="p">(</span><span class="sh">"</span><span class="s">drop table {your_database}.delta_demo</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>
<p><strong>2. Using Exsiting Spark Dataframe and change the format to delta</strong></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data</span> <span class="o">=</span> <span class="n">spark</span><span class="p">.</span><span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
<span class="n">data</span><span class="p">.</span><span class="n">write</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="sh">"</span><span class="s">delta</span><span class="sh">"</span><span class="p">).</span><span class="nf">save</span><span class="p">(</span><span class="sh">"</span><span class="s">/tmp/delta-table</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<h4 id="append-data">Append Data</h4>
<p><strong>Write data from existing Spark Dataframe</strong></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">pyspark.sql.types</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="n">datetime</span> <span class="kn">import</span> <span class="n">date</span>

<span class="n">schema</span> <span class="o">=</span> <span class="nc">StructType</span><span class="p">([</span>
  <span class="nc">StructField</span><span class="p">(</span><span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">,</span> <span class="nc">IntegerType</span><span class="p">(),</span> <span class="bp">True</span><span class="p">),</span>
  <span class="nc">StructField</span><span class="p">(</span><span class="sh">"</span><span class="s">firstName</span><span class="sh">"</span><span class="p">,</span> <span class="nc">StringType</span><span class="p">(),</span> <span class="bp">True</span><span class="p">),</span>
  <span class="nc">StructField</span><span class="p">(</span><span class="sh">"</span><span class="s">middleName</span><span class="sh">"</span><span class="p">,</span> <span class="nc">StringType</span><span class="p">(),</span> <span class="bp">True</span><span class="p">),</span>
  <span class="nc">StructField</span><span class="p">(</span><span class="sh">"</span><span class="s">lastName</span><span class="sh">"</span><span class="p">,</span> <span class="nc">StringType</span><span class="p">(),</span> <span class="bp">True</span><span class="p">),</span>
  <span class="nc">StructField</span><span class="p">(</span><span class="sh">"</span><span class="s">gender</span><span class="sh">"</span><span class="p">,</span> <span class="nc">StringType</span><span class="p">(),</span> <span class="bp">True</span><span class="p">),</span>
  <span class="nc">StructField</span><span class="p">(</span><span class="sh">"</span><span class="s">birthDate</span><span class="sh">"</span><span class="p">,</span> <span class="nc">DateType</span><span class="p">(),</span> <span class="bp">True</span><span class="p">),</span>
  <span class="nc">StructField</span><span class="p">(</span><span class="sh">"</span><span class="s">ssn</span><span class="sh">"</span><span class="p">,</span> <span class="nc">StringType</span><span class="p">(),</span> <span class="bp">True</span><span class="p">),</span>
  <span class="nc">StructField</span><span class="p">(</span><span class="sh">"</span><span class="s">salary</span><span class="sh">"</span><span class="p">,</span> <span class="nc">IntegerType</span><span class="p">(),</span> <span class="bp">True</span><span class="p">)</span>
<span class="p">])</span>

<span class="n">data</span> <span class="o">=</span> <span class="p">[</span>
  <span class="p">(</span><span class="mi">9999998</span><span class="p">,</span> <span class="sh">'</span><span class="s">Billy</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Tommie</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Luppitt</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">M</span><span class="sh">'</span><span class="p">,</span> <span class="n">date</span><span class="p">.</span><span class="nf">fromisoformat</span><span class="p">(</span><span class="sh">'</span><span class="s">1992-09-17</span><span class="sh">'</span><span class="p">),</span> <span class="sh">'</span><span class="s">953-38-9452</span><span class="sh">'</span><span class="p">,</span> <span class="mi">55250</span><span class="p">),</span>
  <span class="p">(</span><span class="mi">9999999</span><span class="p">,</span> <span class="sh">'</span><span class="s">Elias</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Cyril</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Leadbetter</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">M</span><span class="sh">'</span><span class="p">,</span> <span class="n">date</span><span class="p">.</span><span class="nf">fromisoformat</span><span class="p">(</span><span class="sh">'</span><span class="s">1984-05-22</span><span class="sh">'</span><span class="p">),</span> <span class="sh">'</span><span class="s">906-51-2137</span><span class="sh">'</span><span class="p">,</span> <span class="mi">48500</span><span class="p">),</span>
  <span class="p">(</span><span class="mi">10000000</span><span class="p">,</span> <span class="sh">'</span><span class="s">Joshua</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Chas</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Broggio</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">M</span><span class="sh">'</span><span class="p">,</span> <span class="n">date</span><span class="p">.</span><span class="nf">fromisoformat</span><span class="p">(</span><span class="sh">'</span><span class="s">1968-07-22</span><span class="sh">'</span><span class="p">),</span> <span class="sh">'</span><span class="s">988-61-6247</span><span class="sh">'</span><span class="p">,</span> <span class="mi">90000</span><span class="p">),</span>
  <span class="p">(</span><span class="mi">20000001</span><span class="p">,</span> <span class="sh">'</span><span class="s">John</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">,</span> <span class="sh">'</span><span class="s">Doe</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">M</span><span class="sh">'</span><span class="p">,</span> <span class="n">date</span><span class="p">.</span><span class="nf">fromisoformat</span><span class="p">(</span><span class="sh">'</span><span class="s">1978-01-14</span><span class="sh">'</span><span class="p">),</span> <span class="sh">'</span><span class="s">345-67-8901</span><span class="sh">'</span><span class="p">,</span> <span class="mi">55500</span><span class="p">),</span>
  <span class="p">(</span><span class="mi">20000002</span><span class="p">,</span> <span class="sh">'</span><span class="s">Mary</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">,</span> <span class="sh">'</span><span class="s">Smith</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">F</span><span class="sh">'</span><span class="p">,</span> <span class="n">date</span><span class="p">.</span><span class="nf">fromisoformat</span><span class="p">(</span><span class="sh">'</span><span class="s">1982-10-29</span><span class="sh">'</span><span class="p">),</span> <span class="sh">'</span><span class="s">456-78-9012</span><span class="sh">'</span><span class="p">,</span> <span class="mi">98250</span><span class="p">),</span>
  <span class="p">(</span><span class="mi">20000003</span><span class="p">,</span> <span class="sh">'</span><span class="s">Jane</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">,</span> <span class="sh">'</span><span class="s">Doe</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">F</span><span class="sh">'</span><span class="p">,</span> <span class="n">date</span><span class="p">.</span><span class="nf">fromisoformat</span><span class="p">(</span><span class="sh">'</span><span class="s">1981-06-25</span><span class="sh">'</span><span class="p">),</span> <span class="sh">'</span><span class="s">567-89-0123</span><span class="sh">'</span><span class="p">,</span> <span class="mi">89900</span><span class="p">)</span>
<span class="p">]</span>

<span class="n">data_insert</span> <span class="o">=</span> <span class="n">spark</span><span class="p">.</span><span class="nf">createDataFrame</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">schema</span><span class="p">)</span>
<span class="n">data_insert</span><span class="p">.</span><span class="n">write</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="sh">"</span><span class="s">delta</span><span class="sh">"</span><span class="p">).</span><span class="nf">mode</span><span class="p">(</span><span class="sh">"</span><span class="s">append</span><span class="sh">"</span><span class="p">).</span><span class="nf">save</span><span class="p">(</span><span class="sh">"</span><span class="s">{S3_BUCKET}/delta_demo</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<h4 id="read-table">Read Table</h4>
<p><strong>1. Read Delta table name</strong></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">delta_demo_df</span> <span class="o">=</span> <span class="n">spark</span><span class="p">.</span><span class="nf">table</span><span class="p">(</span><span class="sh">"</span><span class="s">{your_database}.delta_demo</span><span class="sh">"</span><span class="p">)</span>
<span class="n">delta_demo_df</span><span class="p">.</span><span class="nf">show</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
</code></pre></div></div>

<table>
  <thead>
    <tr>
      <th>id</th>
      <th>firstName</th>
      <th>middleName</th>
      <th>lastName</th>
      <th>gender</th>
      <th>birthDate</th>
      <th>ssn</th>
      <th style="text-align: left">salary</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>9999998</td>
      <td>Billy</td>
      <td>Tommie</td>
      <td>Luppitt</td>
      <td>M</td>
      <td>1992-09-17</td>
      <td>953-38-9452</td>
      <td style="text-align: left">55250</td>
    </tr>
    <tr>
      <td>9999999</td>
      <td>Elias</td>
      <td>Cyril</td>
      <td>Leadbetter</td>
      <td>M</td>
      <td>1984-05-22</td>
      <td>906-51-2137</td>
      <td style="text-align: left">48500</td>
    </tr>
    <tr>
      <td>20000002</td>
      <td>Mary</td>
      <td> </td>
      <td>Smith</td>
      <td>F</td>
      <td>1982-10-29</td>
      <td>456-78-9012</td>
      <td style="text-align: left">98250</td>
    </tr>
    <tr>
      <td>20000003</td>
      <td>Jane</td>
      <td> </td>
      <td>Doe</td>
      <td>F</td>
      <td>1981-06-25</td>
      <td>567-89-0123</td>
      <td style="text-align: left">89900</td>
    </tr>
    <tr>
      <td>10000000</td>
      <td>Joshua</td>
      <td>Chas</td>
      <td>Broggio</td>
      <td>M</td>
      <td>1968-07-22</td>
      <td>988-61-6247</td>
      <td style="text-align: left">90000</td>
    </tr>
    <tr>
      <td>20000001</td>
      <td>John</td>
      <td> </td>
      <td>Doe</td>
      <td>M</td>
      <td>1978-01-14</td>
      <td>345-67-8901</td>
      <td style="text-align: left">55500</td>
    </tr>
  </tbody>
</table>

<p><strong>2. Read Delta table by specifying the path to the file</strong></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df</span> <span class="o">=</span> <span class="n">spark</span><span class="p">.</span><span class="n">read</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="sh">"</span><span class="s">delta</span><span class="sh">"</span><span class="p">).</span><span class="nf">load</span><span class="p">(</span><span class="sh">"</span><span class="s">/tmp/delta-table</span><span class="sh">"</span><span class="p">)</span>
<span class="n">df</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div>

<h4 id="update-table">Update Table</h4>
<p><strong>1. Using Spark SQL DML</strong></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">spark</span><span class="p">.</span><span class="nf">sql</span><span class="p">(</span><span class="sh">"""</span><span class="s">
UPDATE {your_database}.delta_demo SET gender = </span><span class="sh">'</span><span class="s">Female</span><span class="sh">'</span><span class="s"> WHERE gender = </span><span class="sh">'</span><span class="s">F</span><span class="sh">'</span><span class="s">
</span><span class="sh">"""</span><span class="p">)</span>
<span class="n">spark</span><span class="p">.</span><span class="nf">sql</span><span class="p">(</span><span class="sh">"""</span><span class="s">
UPDATE {your_database}.delta_demo SET gender = </span><span class="sh">'</span><span class="s">Male</span><span class="sh">'</span><span class="s"> WHERE gender = </span><span class="sh">'</span><span class="s">M</span><span class="sh">'</span><span class="s">
</span><span class="sh">"""</span><span class="p">)</span>
<span class="n">spark</span><span class="p">.</span><span class="nf">sql</span><span class="p">(</span><span class="sh">"""</span><span class="s">
CREATE OR REPLACE TEMP VIEW upsert_view (
  id, firstName, middleName, lastName, gender, birthDate, ssn, salary
) AS VALUES
  (9999998, </span><span class="sh">'</span><span class="s">Billy</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="s">Tommie</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="s">Luppitt</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="s">M</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="s">1992-09-17</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="s">953-38-9452</span><span class="sh">'</span><span class="s">, 55250),
  (20000003, </span><span class="sh">'</span><span class="s">Jane</span><span class="sh">'</span><span class="s">, </span><span class="sh">''</span><span class="s">, </span><span class="sh">'</span><span class="s">Doe</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="s">F</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="s">1981-06-25</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="s">567-89-0123</span><span class="sh">'</span><span class="s">, 89900)
</span><span class="sh">"""</span><span class="p">)</span>
<span class="n">spark</span><span class="p">.</span><span class="nf">sql</span><span class="p">(</span><span class="sh">"""</span><span class="s">
MERGE INTO {your_database}.delta_demo demo
USING upsert_view upsert
ON demo.id = upsert.id
WHEN MATCHED THEN UPDATE SET *
WHEN NOT MATCHED THEN INSERT *
</span><span class="sh">"""</span><span class="p">)</span>
<span class="n">spark</span><span class="p">.</span><span class="nf">sql</span><span class="p">(</span><span class="sh">"""</span><span class="s">
DELETE FROM {your_database}.delta_demo WHERE birthDate &lt; </span><span class="sh">'</span><span class="s">1980-01-01</span><span class="sh">'</span><span class="s">
</span><span class="sh">"""</span><span class="p">)</span>
</code></pre></div></div>

<table>
  <thead>
    <tr>
      <th>id</th>
      <th>firstName</th>
      <th>middleName</th>
      <th>lastName</th>
      <th>gender</th>
      <th>birthDate</th>
      <th>ssn</th>
      <th style="text-align: left">salary</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>9999998</td>
      <td>Billy</td>
      <td>Tommie</td>
      <td>Luppitt</td>
      <td>M</td>
      <td>1992-09-17</td>
      <td>953-38-9452</td>
      <td style="text-align: left">55250</td>
    </tr>
    <tr>
      <td>9999999</td>
      <td>Elias</td>
      <td>Cyril</td>
      <td>Leadbetter</td>
      <td>Male</td>
      <td>1984-05-22</td>
      <td>906-51-2137</td>
      <td style="text-align: left">48500</td>
    </tr>
    <tr>
      <td>20000002</td>
      <td>Mary</td>
      <td> </td>
      <td>Smith</td>
      <td>Female</td>
      <td>1982-10-29</td>
      <td>456-78-9012</td>
      <td style="text-align: left">98250</td>
    </tr>
    <tr>
      <td>20000003</td>
      <td>Jane</td>
      <td> </td>
      <td>Doe</td>
      <td>F</td>
      <td>1981-06-25</td>
      <td>567-89-0123</td>
      <td style="text-align: left">89900</td>
    </tr>
  </tbody>
</table>

<blockquote>
  <p>注：
Delta Lake 为了解决数据的一致性和可靠性，引入了事务日志和元数据管理来实现 ACID 事务。</p>

  <p>Delta Lake 的物理构成主要是两部分：</p>
  <ol>
    <li>以 Parquet 格式存储在文件系统的数据文件，任何数据操作，数据文件只增不减；</li>
    <li>在数据文件的同级目录下，有一个文件夹专门存放 Json 格式的事务日志，它用来记录所有对数据的操作，每一次操作都会生成一个日志文件，记录这次操作的详细信息。</li>
  </ol>

  <p>基于以上架构，在每次读取 Delta Lake 数据时，会自动根据事务日志生成一个数据快照，并将该快照的结果返回成 Dataframe。</p>
</blockquote>

<p><strong>2. Using Delta Lake API</strong></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">delta.tables</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="n">pyspark.sql.functions</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">deltaTable</span> <span class="o">=</span> <span class="n">DeltaTable</span><span class="p">.</span><span class="nf">forPath</span><span class="p">(</span><span class="n">spark</span><span class="p">,</span> <span class="sh">"</span><span class="s">/tmp/delta-table</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># Update every even value by adding 100 to it
</span><span class="n">deltaTable</span><span class="p">.</span><span class="nf">update</span><span class="p">(</span>
  <span class="n">condition</span> <span class="o">=</span> <span class="nf">expr</span><span class="p">(</span><span class="sh">"</span><span class="s">id % 2 == 0</span><span class="sh">"</span><span class="p">),</span>
  <span class="nb">set</span> <span class="o">=</span> <span class="p">{</span> <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">expr</span><span class="p">(</span><span class="sh">"</span><span class="s">id + 100</span><span class="sh">"</span><span class="p">)</span> <span class="p">})</span>

<span class="c1"># Delete every even value
</span><span class="n">deltaTable</span><span class="p">.</span><span class="nf">delete</span><span class="p">(</span><span class="n">condition</span> <span class="o">=</span> <span class="nf">expr</span><span class="p">(</span><span class="sh">"</span><span class="s">id % 2 == 0</span><span class="sh">"</span><span class="p">))</span>

<span class="c1"># Upsert (merge) new data
</span><span class="n">newData</span> <span class="o">=</span> <span class="n">spark</span><span class="p">.</span><span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>

<span class="n">deltaTable</span><span class="p">.</span><span class="nf">alias</span><span class="p">(</span><span class="sh">"</span><span class="s">oldData</span><span class="sh">"</span><span class="p">)</span> \
  <span class="p">.</span><span class="nf">merge</span><span class="p">(</span>
    <span class="n">newData</span><span class="p">.</span><span class="nf">alias</span><span class="p">(</span><span class="sh">"</span><span class="s">newData</span><span class="sh">"</span><span class="p">),</span>
    <span class="sh">"</span><span class="s">oldData.id = newData.id</span><span class="sh">"</span><span class="p">)</span> \
  <span class="p">.</span><span class="nf">whenMatchedUpdate</span><span class="p">(</span><span class="nb">set</span> <span class="o">=</span> <span class="p">{</span> <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">col</span><span class="p">(</span><span class="sh">"</span><span class="s">newData.id</span><span class="sh">"</span><span class="p">)</span> <span class="p">})</span> \
  <span class="p">.</span><span class="nf">whenNotMatchedInsert</span><span class="p">(</span><span class="n">values</span> <span class="o">=</span> <span class="p">{</span> <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">col</span><span class="p">(</span><span class="sh">"</span><span class="s">newData.id</span><span class="sh">"</span><span class="p">)</span> <span class="p">})</span> \
  <span class="p">.</span><span class="nf">execute</span><span class="p">()</span>

<span class="n">deltaTable</span><span class="p">.</span><span class="nf">toDF</span><span class="p">().</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div>
<h4 id="read-older-versions-of-data">Read older versions of data</h4>
<p><strong>Delta Lake 提供方式查询历次数据更改后的数据版本的快照</strong></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df1</span> <span class="o">=</span> <span class="n">spark</span><span class="p">.</span><span class="n">read</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="sh">"</span><span class="s">delta</span><span class="sh">"</span><span class="p">)</span> \
  <span class="p">.</span><span class="nf">option</span><span class="p">(</span><span class="sh">"</span><span class="s">versionAsOf</span><span class="sh">"</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> \
  <span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="sh">"</span><span class="s">/tmp/delta-table</span><span class="sh">"</span><span class="p">)</span>

<span class="n">df2</span> <span class="o">=</span> <span class="n">spark</span><span class="p">.</span><span class="n">read</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="sh">"</span><span class="s">delta</span><span class="sh">"</span><span class="p">)</span> \
  <span class="p">.</span><span class="nf">option</span><span class="p">(</span><span class="sh">"</span><span class="s">timestampAsOf</span><span class="sh">"</span><span class="p">,</span> <span class="n">timestamp_string</span><span class="p">)</span> \
  <span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="sh">"</span><span class="s">/tmp/delta-table</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<p><strong>Data Retention</strong></p>

<p>为了访问先前版本的 Delta table 数据，必须完整地保留数据文件和事务日志。默认情况下，数据文件不会自动被清除，表的历史快照会被保留 30 天。</p>
<ol>
  <li>清除数据文件，执行 <a href="https://docs.delta.io/2.1.0/delta-utility.html#-delta-vacuum">VACUUM</a></li>
</ol>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- vacuum files not required by versions older than the default retention period</span>
<span class="k">VACUUM</span> <span class="p">{</span><span class="n">your_database</span><span class="p">}.</span><span class="n">delta_demo</span>

<span class="c1">-- vacuum files in path-based table</span>
<span class="k">VACUUM</span> <span class="s1">'/data/events'</span>
<span class="k">VACUUM</span> <span class="n">delta</span><span class="p">.</span><span class="nv">`/data/events/`</span>

<span class="c1">-- vacuum files not required by versions more than 100 hours old</span>
<span class="k">VACUUM</span> <span class="n">delta</span><span class="p">.</span><span class="nv">`/data/events/`</span> <span class="n">RETAIN</span> <span class="mi">100</span> <span class="n">HOURS</span>

<span class="c1">-- do dry run to get the list of files to be deleted</span>
<span class="k">VACUUM</span> <span class="p">{</span><span class="n">your_database</span><span class="p">}.</span><span class="n">delta_demo</span> <span class="n">DRY</span> <span class="n">RUN</span>
</code></pre></div></div>

<ol>
  <li>改变数据留存时间，改变 <a href="https://docs.delta.io/2.1.0/delta-batch.html#-table-properties">Table properties</a></li>
</ol>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">--controls how long the history for a table is kept. The default is interval 30 days.</span>
<span class="k">ALTER</span> <span class="k">TABLE</span> <span class="p">{</span><span class="n">your_database</span><span class="p">}.</span><span class="n">delta_demo</span> <span class="k">SET</span> <span class="n">TBLPROPERTIES</span> <span class="p">(</span><span class="s1">'delta.logRetentionDuration'</span> <span class="o">=</span> <span class="s1">'interval &lt;interval&gt;'</span><span class="p">);</span>
</code></pre></div></div>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">--To access historical data even if you run VACUUM on the Delta table, This setting may cause your storage costs to go up.</span>
<span class="k">ALTER</span> <span class="k">TABLE</span> <span class="p">{</span><span class="n">your_database</span><span class="p">}.</span><span class="n">delta_demo</span> <span class="k">SET</span> <span class="n">TBLPROPERTIES</span> <span class="p">(</span><span class="s1">'delta.deletedFileRetentionDuration'</span> <span class="o">=</span> <span class="s1">'interval &lt;interval&gt;'</span><span class="p">);</span>
</code></pre></div></div>

<h4 id="write-a-stream-of-data-to-a-table">Write a stream of data to a table</h4>
<p><strong>支持将 Structured Streaming 的流式数据集写入 Delta table</strong></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">streamingDf</span> <span class="o">=</span> <span class="n">spark</span><span class="p">.</span><span class="n">readStream</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="sh">"</span><span class="s">rate</span><span class="sh">"</span><span class="p">).</span><span class="nf">load</span><span class="p">()</span>

<span class="n">stream</span> <span class="o">=</span> <span class="n">streamingDf</span> \
  <span class="p">.</span><span class="nf">selectExpr</span><span class="p">(</span><span class="sh">"</span><span class="s">value as id</span><span class="sh">"</span><span class="p">)</span> \
  <span class="p">.</span><span class="n">writeStream</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="sh">"</span><span class="s">delta</span><span class="sh">"</span><span class="p">)</span> \
  <span class="p">.</span><span class="nf">option</span><span class="p">(</span><span class="sh">"</span><span class="s">checkpointLocation</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">/tmp/checkpoint</span><span class="sh">"</span><span class="p">)</span> \
  <span class="p">.</span><span class="nf">start</span><span class="p">(</span><span class="sh">"</span><span class="s">/tmp/delta-table</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<h4 id="read-delta-table-as-a-streaming-source">Read Delta table as a streaming source</h4>
<p><strong>将 Delta 表的更新读进流式数据中</strong></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">stream2</span> <span class="o">=</span> <span class="n">spark</span><span class="p">.</span><span class="n">readStream</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="sh">"</span><span class="s">delta</span><span class="sh">"</span><span class="p">)</span> \
  <span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="sh">"</span><span class="s">/tmp/delta-table</span><span class="sh">"</span><span class="p">)</span> \
  <span class="p">.</span><span class="n">writeStream</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="sh">"</span><span class="s">console</span><span class="sh">"</span><span class="p">)</span> \
  <span class="p">.</span><span class="nf">start</span><span class="p">()</span>
</code></pre></div></div>

<h3 id="hive-insert-overwrite-vs-delta-lake-update">Hive Insert Overwrite VS Delta Lake Update</h3>
<h4 id="hive-insert-overwrite">Hive Insert Overwrite</h4>
<p><strong>Advantages:</strong></p>
<ol>
  <li><strong>Simplicity</strong>: Hive 的 overwrite 功能简单易用，特别是在需要完全替换表中数据时；</li>
  <li><strong>Compatibility</strong>: Hive 与 Hadoop 生态系统紧密集成，与各种基于 Hadoop 的工具和框架兼容；</li>
  <li><strong>Flexibility</strong>: 可以用于 overwrite 整个表或特定分区，提供数据管理的灵活性。</li>
</ol>

<p><strong>Disadvantages:</strong></p>
<ol>
  <li><strong>Limited Update Support</strong>: 缺乏细粒度更新的能力（如更新特定的行或列），对于细粒度更新的情景效率低下；</li>
  <li><strong>Resource-Intensive</strong>: overwrite 大表涉及删除现有数据并写入新数据，消耗大量资源，影响性能和存储利用率；</li>
  <li><strong>No Transaction Support</strong>: Hive 的 overwrite 操作不支持 ACID 事务，不利于在并发环境中保持数据完整性。</li>
</ol>

<h4 id="delta-lake-update">Delta Lake Update</h4>
<p><strong>Advantages:</strong></p>
<ol>
  <li><strong>ACID Transactions</strong>: Delta Lake 提供完整的 ACID 事务，确保在并发读写操作中数据的完整性和一致性；</li>
  <li><strong>Fine-Grained Updates</strong>: 支持细粒度更新，允许更高效和有针对性的数据操作；</li>
  <li><strong>Schema Evolution</strong>: Delta Lake 支持模式演化，允许对表 Schema 进行更改而无需重写整个数据集；</li>
  <li><strong>Optimized Performance</strong>: Delta Lake 的优化存储格式和事务功能有助于提高大规模数据集处理性能。</li>
</ol>

<p><strong>Disadvantages:</strong></p>
<ol>
  <li><strong>Dependency on Spark</strong>: Delta Lake 与 Apache Spark 紧密集成，受限于不能直接与其他数据处理框架一起使用；</li>
  <li><strong>Limited Compatibility</strong>: Delta Lake 与 Hive 的集成存在限制，主要在元数据管理方面；</li>
  <li><strong>Complexity</strong>: ACID 事务和模式演化功能增加了复杂性，需要更深入地理解底层存储和处理机制。</li>
</ol>

<h4 id="summary">Summary</h4>
<p>总之，Hive 的 overwrite 功能提供了简单性和兼容性，但缺乏细粒度更新支持和 ACID 事务；Delta Lake提供 ACID 事务、精细更新、模式演化和优化性能，但依赖于 Spark，与其他框架的兼容性有限。</p>

<p>具体的选择取决于用例的要求，包括对事务支持、精细更新和现有技术栈的需求。</p>

<h3 id="delta-lake-on-unstructured-and-semi-structured-data">Delta Lake on Unstructured and Semi-structured Data</h3>
<p>依照同样的原理，Delta Lake 也可以用来处理 Json、XML、Avro 等半结构化数据，以及文本、图像、音频、视频等非结构化的数据。</p>

<p><strong>1. 以 Json 数据为例，将半结构化对象存入 Delta Table</strong></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">pyspark.sql</span> <span class="kn">import</span> <span class="n">SparkSession</span>

<span class="c1"># 创建 Spark Session
</span><span class="n">spark</span> <span class="o">=</span> <span class="n">SparkSession</span><span class="p">.</span><span class="n">builder</span> \
    <span class="p">.</span><span class="nf">appName</span><span class="p">(</span><span class="sh">"</span><span class="s">DeltaLakeExample</span><span class="sh">"</span><span class="p">)</span> \
    <span class="p">.</span><span class="nf">config</span><span class="p">(</span><span class="sh">"</span><span class="s">spark.sql.extensions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">io.delta.sql.DeltaSparkSessionExtension</span><span class="sh">"</span><span class="p">)</span> \
    <span class="p">.</span><span class="nf">config</span><span class="p">(</span><span class="sh">"</span><span class="s">spark.sql.catalog.spark_catalog</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">org.apache.spark.sql.delta.catalog.DeltaCatalog</span><span class="sh">"</span><span class="p">)</span> \
    <span class="p">.</span><span class="nf">getOrCreate</span><span class="p">()</span>

<span class="c1"># 读取 JSON 数据
</span><span class="n">json_df</span> <span class="o">=</span> <span class="n">spark</span><span class="p">.</span><span class="n">read</span><span class="p">.</span><span class="nf">json</span><span class="p">(</span><span class="sh">"</span><span class="s">/path/to/json/files</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># 将 JSON 数据写入 Delta Lake 表
</span><span class="n">json_df</span><span class="p">.</span><span class="n">write</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="sh">"</span><span class="s">delta</span><span class="sh">"</span><span class="p">).</span><span class="nf">mode</span><span class="p">(</span><span class="sh">"</span><span class="s">append</span><span class="sh">"</span><span class="p">).</span><span class="nf">save</span><span class="p">(</span><span class="sh">"</span><span class="s">/tmp/delta-table-json</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># 读取 Delta Lake 表中的 JSON 数据
</span><span class="n">delta_json_df</span> <span class="o">=</span> <span class="n">spark</span><span class="p">.</span><span class="n">read</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="sh">"</span><span class="s">delta</span><span class="sh">"</span><span class="p">).</span><span class="nf">load</span><span class="p">(</span><span class="sh">"</span><span class="s">/tmp/delta-table-json</span><span class="sh">"</span><span class="p">)</span>
<span class="n">delta_json_df</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div>

<p><strong>2. 以文本数据为例，将非结构化对象存入 Delta Table</strong></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">pyspark.sql</span> <span class="kn">import</span> <span class="n">SparkSession</span>
<span class="kn">from</span> <span class="n">pyspark.sql.types</span> <span class="kn">import</span> <span class="o">*</span>

<span class="c1"># 创建 Spark Session
</span><span class="n">spark</span> <span class="o">=</span> <span class="n">SparkSession</span><span class="p">.</span><span class="n">builder</span> \
    <span class="p">.</span><span class="nf">appName</span><span class="p">(</span><span class="sh">"</span><span class="s">DeltaLakeExample</span><span class="sh">"</span><span class="p">)</span> \
    <span class="p">.</span><span class="nf">config</span><span class="p">(</span><span class="sh">"</span><span class="s">spark.sql.extensions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">io.delta.sql.DeltaSparkSessionExtension</span><span class="sh">"</span><span class="p">)</span> \
    <span class="p">.</span><span class="nf">config</span><span class="p">(</span><span class="sh">"</span><span class="s">spark.sql.catalog.spark_catalog</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">org.apache.spark.sql.delta.catalog.DeltaCatalog</span><span class="sh">"</span><span class="p">)</span> \
    <span class="p">.</span><span class="nf">getOrCreate</span><span class="p">()</span>

<span class="c1"># 定义 schema
</span><span class="n">schema</span> <span class="o">=</span> <span class="nc">StructType</span><span class="p">([</span>
    <span class="nc">StructField</span><span class="p">(</span><span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">,</span> <span class="nc">IntegerType</span><span class="p">(),</span> <span class="bp">True</span><span class="p">),</span>
    <span class="nc">StructField</span><span class="p">(</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="nc">StringType</span><span class="p">(),</span> <span class="bp">True</span><span class="p">)</span>
<span class="p">])</span>

<span class="c1"># 创建数据
</span><span class="n">data</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="sh">"</span><span class="s">This is a sample text.</span><span class="sh">"</span><span class="p">),</span>
    <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="sh">"</span><span class="s">Another example of text data.</span><span class="sh">"</span><span class="p">)</span>
<span class="p">]</span>

<span class="c1"># 创建 DataFrame
</span><span class="n">text_df</span> <span class="o">=</span> <span class="n">spark</span><span class="p">.</span><span class="nf">createDataFrame</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">schema</span><span class="p">)</span>

<span class="c1"># 将文本数据写入 Delta Lake 表
</span><span class="n">text_df</span><span class="p">.</span><span class="n">write</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="sh">"</span><span class="s">delta</span><span class="sh">"</span><span class="p">).</span><span class="nf">mode</span><span class="p">(</span><span class="sh">"</span><span class="s">append</span><span class="sh">"</span><span class="p">).</span><span class="nf">save</span><span class="p">(</span><span class="sh">"</span><span class="s">/tmp/delta-table-text</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># 读取 Delta Lake 表中的文本数据
</span><span class="n">delta_text_df</span> <span class="o">=</span> <span class="n">spark</span><span class="p">.</span><span class="n">read</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="sh">"</span><span class="s">delta</span><span class="sh">"</span><span class="p">).</span><span class="nf">load</span><span class="p">(</span><span class="sh">"</span><span class="s">/tmp/delta-table-text</span><span class="sh">"</span><span class="p">)</span>
<span class="n">delta_text_df</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div>

<p>To be continued…</p>]]></content><author><name></name></author><category term="go_big" /><summary type="html"><![CDATA[What is Delta Lake Delta Lake 是一个开源的数据湖存储层 (lakehouse storage layer) 技术，它利用基于文件的事务日志 (file-based transaction log) 扩展了 Parquet 数据文件，以实现 ACID 事务和可扩展的元数据处理。Delta Lake 与 Apache Spark API 完全兼容，专为与 Structured Streaming 集成而开发，可以很方便地对 batch &amp; streaming 数据进行处理。]]></summary></entry><entry><title type="html">Hands on Data Modeling</title><link href="http://localhost:4000/go_big/2024/09/17/data_modeling.html" rel="alternate" type="text/html" title="Hands on Data Modeling" /><published>2024-09-17T00:00:00+08:00</published><updated>2024-09-17T00:00:00+08:00</updated><id>http://localhost:4000/go_big/2024/09/17/data_modeling</id><content type="html" xml:base="http://localhost:4000/go_big/2024/09/17/data_modeling.html"><![CDATA[<h3 id="what-is-data-modeling">What is Data Modeling</h3>
<p>数据建模是指创建数据模型的过程。软件工程中，数据工程师在设计数据库时，会将现实世界的各类数据及其关系进行分析、抽象，从中找出内在联系，并将其形式化描述为数据模型，以此建立信息系统的数据库结构。</p>

<h3 id="why-data-modeling">Why Data Modeling</h3>
<ol>
  <li>帮助理解和组织数据，使其更易于管理和使用；</li>
  <li>通过优化数据结构，提高数据存储和检索的效率；</li>
  <li>定义数据的约束和规则，确保数据的一致性和完整性；</li>
  <li>确保数据模型能够满足业务需求和流程。</li>
</ol>

<h3 id="how-to-model-data">How to Model Data</h3>
<ol>
  <li>Requirement Analysis
    <ul>
      <li>定义和分析业务需求；</li>
      <li>确定数据需求和需要的相应支持。</li>
    </ul>
  </li>
  <li>Conceptual Data Model
    <ul>
      <li>定义实体以及实体之间的关系；</li>
      <li>使用 ER(Entity-relationship) 图来表示数据的高层次结构，常用 <a href="https://www.lucidchart.com/pages/?">Lucidchart</a> 来构建概念模型。</li>
    </ul>
  </li>
  <li>Logical Data Model
    <ul>
      <li>在概念模型的基础上添加更多信息，定义表、列、主键和外键；</li>
      <li>一个概念模型的实现可能需要多个逻辑模型。</li>
    </ul>
  </li>
  <li>Physical Data Model
    <ul>
      <li>根据逻辑模型创建数据库对象，包括数据表的物理位置、物理名字、字段类型以及命名规范；</li>
      <li>考虑数据库的性能、存储和索引。</li>
    </ul>
  </li>
</ol>

<h3 id="data-warehouse">Data Warehouse</h3>
<p>数据仓库 (Data Warehouse) 是一个用于存储和分析大量数据的系统，它通常从多个源系统中提取数据，并进行清洗、转换和加载 (ETL) 供数据分析和 BI 报告使用。数据建模在数据仓库的构建过程中同样尤为重要。</p>

<h4 id="数据仓库建模的类型">数据仓库建模的类型</h4>
<ol>
  <li>Star Schema
    <ul>
      <li>星型模型 (Star Schema) 以事实表 (Fact Table) 为中心，周围是维度表 (Dimension Table)；</li>
      <li>事实表存储度量数据（如: 销售额），维度表存储描述数据（如: 时间、地点、产品）。</li>
    </ul>
  </li>
  <li>Snowflake Schema
    <ul>
      <li>雪花模型 (Snowflake Schema) 是星型模型的扩展，将维度表进一步规范化，分解成多个相关的表；</li>
      <li>它的特点是减少了数据冗余，但是提高了查询的复杂性。</li>
    </ul>
  </li>
  <li>Constellation Schema
    <ul>
      <li>事实星座模型 (Fact Constellation Schema) 包含多个事实表，适用于复杂的业务场景。</li>
    </ul>
  </li>
</ol>

<h3 id="data-lake">Data Lake</h3>
<p>数据湖 (Data Lake) 和数据仓库一样，是存储大量数据的系统，但数据湖不仅用于存储结构化数据，还用来存储半结构化、非结构化数据。数据湖允许以原始格式存储数据，数据的质量和一致性可能较低。它一般用于存储用户行为数据，如网站日志、社交媒体数据、视频等，以进行大数据分析和机器学习。</p>

<h3 id="data-lakehouse">Data Lakehouse</h3>
<p>数据湖仓库 (Data Lakehouse) 结合了数据湖和数据仓库的优点，它既能处理结构化数据，也能处理非结构化数据，同时提供了高效的查询性能和数据管理功能。它的代表产品是由 <a href="https://docs.databricks.com/en/delta/index.html">Databricks</a> 开发的基于 Apache Spark 的开源存储层的 <a href="https://delta.io/">Delta Lake</a>，以及用于大规模数据集的高性能表格式的 <a href="https://iceberg.apache.org/">Apache Iceberg</a>。</p>

<p>关于 Delta Lake 可以参见我的这一篇日志：<a href="../19/delta_lake.html">Delta Lake</a>.</p>

<h3 id="数据建模过程中常见问题及应对措施">数据建模过程中常见问题及应对措施</h3>
<blockquote>
  <p><strong>Problem</strong>: 业务需求不清晰，以及项目进行中需求变更频繁</p>

  <p><strong>Solution</strong>:</p>
  <ol>
    <li>深入沟通，明确需求，并编写详细的需求文档；</li>
    <li>采用迭代开发的方法，分阶段完善数据模型</li>
  </ol>
</blockquote>

<blockquote>
  <p><strong>Problem</strong>: 不同数据源数据不一致，数据缺失，数据冗余</p>

  <p><strong>Solution</strong>:</p>
  <ol>
    <li>数据清洗，确保数据的一致性和完整性；</li>
    <li>建立数据验证规则，确保数据的准确性</li>
  </ol>
</blockquote>

<blockquote>
  <p><strong>Problem</strong>: 实体之间关系复杂，数据模型复杂</p>

  <p><strong>Solution</strong>:</p>
  <ol>
    <li>以目的驱动简化模型，避免不必要的复杂度；</li>
    <li>将复杂的数据模型分解为多个模块，分别建模和管理</li>
  </ol>
</blockquote>

<blockquote>
  <p><strong>Problem</strong>: 存储效率低，查询性能差</p>

  <p><strong>Solution</strong>:</p>
  <ol>
    <li>根据实际需求，平衡数据的 Normalization 和 Denormalization；</li>
    <li>为常用查询字段建立索引；</li>
    <li>在数据建模过程中进行性能测试</li>
  </ol>

  <blockquote>
    <p><em>注：</em></p>

    <p><em>1.规范化（Normalization）：规范化是将数据组织成多个相关表的过程，以减少数据冗余和提高数据一致性；</em></p>

    <p><em>2.反规范化（Denormalization）：反规范化是将数据合并到较少的表中，以减少查询时的多表连接，从而提高查询性能</em></p>
  </blockquote>
</blockquote>

<blockquote>
  <p><strong>Problem</strong>: 敏感数据泄露</p>

  <p><strong>Solution</strong>:</p>
  <ol>
    <li>对敏感数据进行加密；</li>
    <li>严格的访问控制策略，确保只有授权的用户可以访问数据</li>
  </ol>
</blockquote>

<p>To be continued…</p>]]></content><author><name></name></author><category term="go_big" /><summary type="html"><![CDATA[What is Data Modeling 数据建模是指创建数据模型的过程。软件工程中，数据工程师在设计数据库时，会将现实世界的各类数据及其关系进行分析、抽象，从中找出内在联系，并将其形式化描述为数据模型，以此建立信息系统的数据库结构。]]></summary></entry><entry><title type="html">李录谈常识</title><link href="http://localhost:4000/reading/2024/09/17/common_sense.html" rel="alternate" type="text/html" title="李录谈常识" /><published>2024-09-17T00:00:00+08:00</published><updated>2024-09-17T00:00:00+08:00</updated><id>http://localhost:4000/reading/2024/09/17/common_sense</id><content type="html" xml:base="http://localhost:4000/reading/2024/09/17/common_sense.html"><![CDATA[<p>芒格先生曾说过，常识是最稀缺的认知。违背常识会付出代价。所谓的常识通常也是由这些代价反证出来的。所以对常识的讨论总还是有价值的。</p>

<p>这里我来谈谈几条常识，也听听大家的意见。</p>

<ol>
  <li>
    <p>现代化是市场经济和现代科技结合的产物。但这其中有一个因果关系。市场经济是因，现代科技是果。没有现代市场经济，不会产生现代科技，在非市场经济的制度中，技术不能有效的转化成生产力，也因此不能产生持久、领先的科技。但是发达的市场经济一定会产生领先的科技。</p>
  </li>
  <li>
    <p>除国防外，当今所有先进技术最先都是由私营企业在市场经济环垸下创造出来的。美国，西方，中国都如此。政府主导先进科技创新，如果破坏了市场机制，没有成功案例。</p>
  </li>
  <li>
    <p>人的本性都是白私的。人的道德其实是对于更广泛私利、长远私利的描述。制度设计和政策措施如果不能激发人的私利，形成不了正向的激励机制，也就不可持续。无论在经济或是政治活动中都是一样。</p>
  </li>
  <li>
    <p>关于腐败。腐败本质上是一种权力寻租。只要有权力就永远有腐败。在整个人类历史进程中、在所有制度下，腐败一直存在，将来也会永远存在。腐败只能控制，不可能完全消除。过度腐败对社会伤害，过度反腐也会对社会伤害。公正的制度性控制比人为的控制更可持续，而且负面后果更少。</p>
  </li>
  <li>
    <p>权力是一组人对另一组人行为的影响力。它的总量一定，和人口数量相关。权力从本质上是一个零和的游戏。政府权力过大，必然导致民间的权力过小，官不聊生必然导致民不聊生，古今中外都如此。</p>
  </li>
  <li>
    <p>市场经济本质上是政府在经济上让权给民间。在市场经济中所有重要的决定都只能由私人来做出。政府的作用在于服务和维持规则，不是指挥。由政府指挥市场经济没有成功案例。民间经济、市场经济是否有活力，常常取决于政府在经济活动中的权力是否足够小。</p>
  </li>
  <li>
    <p>市场经济对人才的选择由自由竞争决定，不拘一格也无法预测。一个社会越能够容忍不同人格、不同价值观的人才，越能在市场经济中成功。反之亦然。</p>
  </li>
  <li>
    <p>人从本性上都追求平等。追求结果平等的机制会造成最大的不平等，追求机会平等的机制会形成对结果平等的最大近似。</p>
  </li>
  <li>
    <p>人对安全的需求远远大于对财富的追求。在已经温饱的前提下，没有人身安全保障，对财富的追求会大大降低。</p>
  </li>
  <li>
    <p>市场经济行为和预期相关。当一个市场经济中，绝大多数人无论因何种原因开始持负面预期时，经济活动会衰退，衰退本身会加固负面预期，从而加速衰退。反之亦然。</p>
  </li>
  <li>
    <p>市场经济是由自发的需求、自主的供给，通过自由竞争而形成的。其中需求是主因，供给是手段和结果。市场经济的真实总量实际上是由真实需求总量决定的，而不是由供给决定的。真实需求增加可以提振供给。真实需求降低，提振供给不仅不能解决问题，还会造成更多连带问题。</p>
  </li>
</ol>]]></content><author><name></name></author><category term="reading" /><summary type="html"><![CDATA[芒格先生曾说过，常识是最稀缺的认知。违背常识会付出代价。所谓的常识通常也是由这些代价反证出来的。所以对常识的讨论总还是有价值的。]]></summary></entry><entry><title type="html">Rules of AI in Cursor</title><link href="http://localhost:4000/blog/2024/09/17/rules_of_ai.html" rel="alternate" type="text/html" title="Rules of AI in Cursor" /><published>2024-09-17T00:00:00+08:00</published><updated>2024-09-17T00:00:00+08:00</updated><id>http://localhost:4000/blog/2024/09/17/rules_of_ai</id><content type="html" xml:base="http://localhost:4000/blog/2024/09/17/rules_of_ai.html"><![CDATA[<p>Here are the AI ​​answer rules I set for <a href="https://www.cursor.com/">Cursor</a> to help me maximize my learning and understanding of programming knowledge:</p>

<p>You are an Al coding instructor designed to assist and guide me as l learn to code. Your primary goal is to help me learn programming concepts, bestpractices, and problem-solving skils while writing code. Always assume l’m a beginner with limited programming knowledge.</p>

<p>Follow these guidelines in all interactions:</p>
<ol>
  <li>Explain concepts thoroughly but in simple terms, avoiding jargon when possible.</li>
  <li>When introducing new terms, provide clear definitions and examples.</li>
  <li>Break down complex problems into smaller,manageable steps.</li>
  <li>Encourage good coding practices and explain why they are important.</li>
  <li>Provide examples and analogies to illustrate programming concepts.</li>
  <li>Be patient and supportive, understanding that learning to code can be challenging.</li>
  <li>Offer praise for correct implementations and gentle corrections for mistakes.</li>
  <li>When correcting errors, explain why the error occurred and how to fix it.9.Suggest resources for further learning when appropriate</li>
  <li>Encourage me to ask questions and seek clarification.</li>
  <li>Foster problem-solving skils by guiding me to find solutions rather than always providing direct answers.</li>
  <li>Adapt your teaching style to my pace and learning preferences.</li>
  <li>Provide code snippets to illustrate concepts, but always explain the code line by line.</li>
  <li>Use comments throughout the code to help document what is happening.</li>
</ol>

<p>Address the my questions thoroughly, keeping in mind the quidelines above. lf the question is unclear or lacks context, ask me for clarification
Review the code and provide feedback. f there are erors or areas for improvement,explain them clearly and suggest corrections. if the code is correct, offerpraise and explain why it’s a good implementation.</p>

<p>Structure your responses as follows:</p>
<ol>
  <li>Format your response as markdown.</li>
  <li>Answer my question.</li>
  <li>Code review and feedback.</li>
  <li>Suggestions for further learning or practice.</li>
  <li>Using zh-CN.</li>
</ol>

<p>Remember, your goal is not just to help me write correct code, but to help me understand the underlying principles and develop my programming skilsAlways strive to be clear, patient, and encouraging in your responses.</p>]]></content><author><name></name></author><category term="blog" /><summary type="html"><![CDATA[Here are the AI ​​answer rules I set for Cursor to help me maximize my learning and understanding of programming knowledge:]]></summary></entry><entry><title type="html">Hands on Data Visualization</title><link href="http://localhost:4000/go_big/2024/09/16/data_visualization.html" rel="alternate" type="text/html" title="Hands on Data Visualization" /><published>2024-09-16T00:00:00+08:00</published><updated>2024-09-16T00:00:00+08:00</updated><id>http://localhost:4000/go_big/2024/09/16/data_visualization</id><content type="html" xml:base="http://localhost:4000/go_big/2024/09/16/data_visualization.html"><![CDATA[<h3 id="background">Background</h3>
<p>在当前信息化时代，我们所有人都正遭受信息过载和数据过剩的困扰。数据可视化的好处便是让我们看到这些数据的规律以及它们的内在联系，便于我们在繁杂的信息中聚焦到最重要的部分。</p>

<p>一位丹麦科普学家 <a href="https://en.wikipedia.org/wiki/Tor_N%C3%B8rretranders">Tor Nørretranders</a> 研究发现，人类通过视觉接收信息的带宽是所有感官中最大的，大概是 1250MB/s，触觉则相当于 USB 传输接口，大约有 125MB/s，其次是听觉、嗅觉、味觉。我们每天通过感官接收到巨量的信息，再经由大脑的处理提取精炼，凭借人类群体社会日益高效的信息交换，构成了这个物种进化源源不断的动力。</p>

<p>数据可视化的本质就是将大量信息压缩成图表，通过视觉的形式将其中的洞见直观地展示出来。当以足够大的数据集为基础，假以正确的问题，并且以正确的方式去处理这些数据，有趣的事情就会出现。</p>

<blockquote>
  <p>Let my dataset change your mindset. ——Hans Rosling</p>
</blockquote>

<h3 id="data-visualization-tools">Data Visualization Tools</h3>
<h4 id="matplotlib-with-seaborn">Matplotlib (with Seaborn)</h4>
<p><a href="https://matplotlib.org/stable/contents.html">Matplotlib</a> 是 Python 数据科学和数据分析领域最常见的可视化库，支持各种图表类型。<a href="https://seaborn.pydata.org/">Seaborn</a> 是基于 Matplotlib 的绘图库，它提供了更高级的接口和更美观的默认样式。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="n">seaborn</span> <span class="k">as</span> <span class="n">sns</span>
<span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>

<span class="c1"># Matplotlib example
</span><span class="n">x</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
<span class="n">y</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">11</span><span class="p">]</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">X-axis</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Y-axis</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">'</span><span class="s">Line Chart</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>

<span class="c1"># Seaborn example
</span><span class="n">holdings</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="sh">"</span><span class="s">holdings.csv</span><span class="sh">"</span><span class="p">)</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">barplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">holdings</span><span class="p">.</span><span class="n">ticker</span><span class="p">,</span><span class="n">y</span><span class="o">=</span><span class="n">holdings</span><span class="p">.</span><span class="n">shares</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">"</span><span class="s">holdings</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div>

<p><strong>Learning Path</strong></p>
<ul>
  <li><strong>基础学习</strong>: 从 Matplotlib 的基础开始，学习如何创建基本图表。</li>
  <li><strong>高级功能</strong>: 学习如何使用 Seaborn 创建更高级和美观的图表。</li>
  <li><strong>项目实践</strong>: 通过实际项目练习，巩固所学知识。</li>
</ul>

<h4 id="tableau">Tableau</h4>
<p><a href="https://www.tableau.com/learn/training">Tableau</a> 是一个强大的商业数据可视化工具，支持丰富的图表类型和交互功能。它的拖放界面使得创建复杂的可视化变得简单。</p>

<p><strong>Learning Path</strong></p>
<ul>
  <li><strong>基础学习</strong>: 学习 Tableau 的基本操作和界面。</li>
  <li><strong>高级功能</strong>: 探索 Tableau 的高级功能，如计算字段、参数和仪表盘。</li>
  <li><strong>项目实践</strong>: 通过实际项目练习，创建复杂的商业智能报告和可视化。</li>
</ul>

<p>To be continued…</p>]]></content><author><name></name></author><category term="go_big" /><summary type="html"><![CDATA[Background 在当前信息化时代，我们所有人都正遭受信息过载和数据过剩的困扰。数据可视化的好处便是让我们看到这些数据的规律以及它们的内在联系，便于我们在繁杂的信息中聚焦到最重要的部分。]]></summary></entry><entry><title type="html">Hands on Python</title><link href="http://localhost:4000/go_big/2024/09/15/python.html" rel="alternate" type="text/html" title="Hands on Python" /><published>2024-09-15T00:00:00+08:00</published><updated>2024-09-15T00:00:00+08:00</updated><id>http://localhost:4000/go_big/2024/09/15/python</id><content type="html" xml:base="http://localhost:4000/go_big/2024/09/15/python.html"><![CDATA[<h3 id="background">Background</h3>
<p><a href="https://www.python.org/">Python</a> 作为一个高级编程语言 (high-level language)，它的主要工作是将用户编写的 Python 源代码解释成机器能理解的成字节码 (bytecode)，以便让机器执行指令。</p>

<p>相比于机器语言和汇编语言等低级语言 (low-level language)，使用高级编程语言编写代码有一些好处：代码更少也更易读，编写代码所需的时间更短；更容易做到跨平台运行。</p>

<p>安装 Python 时，它很重要的一个组件是 Python Interpreter。解释器的主要工作是解释并运行 Python: 读取用户编写的 Python 源代码；对源代码进行词法分析，将代码分解成词法单元（tokens）；之后进行语法分析，构建抽象语法树（Abstract Syntax Tree，AST）来表示代码的结构；接着将抽象语法树编译成 bytecode，这是一种中间形式的代码；最后，Python 解释器会逐行执行字节码指令，将其转换为机器码并执行，实现源代码的功能。</p>

<p>执行 Python 有两种模式：<strong>immediate mode</strong> &amp; <strong>script mode</strong>. 前者是在 terminal 界面进入 Python 解释器的窗口进行即时交互；第二种是通过编写扩展名为 <strong>py</strong> 的 Python 脚本，使用 Python 解释器去执行该脚本。</p>

<p>在日常调试和数据分析过程中，另一个常用的 python 交互方式是 <a href="https://jupyter.org/">Jupiter Notebook</a>。</p>

<h3 id="installation">Installation</h3>
<p>根据操作系统不同，安装 Python 的方式有很多，详情可以参考 <a href="https://www.python.org/downloads/">Downlaod Python</a>。笔者推荐使用 <a href="https://www.anaconda.com/download/success">Anaconda</a> 作为 Python 的环境管理工具。</p>

<p>检验 Python 环境配置是否已经完成：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python <span class="nt">--version</span>
</code></pre></div></div>

<h3 id="data-type">Data Type</h3>
<p>Python 中常见的数据类型包括：</p>

<ol>
  <li>整数（int）：表示整数值，如 5、-3;</li>
  <li>浮点数（float）：表示带有小数点的数值，如 3.14、-0.001;</li>
  <li>字符串（str）：表示文本数据，如 ‘hello’、”world”;</li>
  <li>布尔值（bool）：表示逻辑值，只有两个取值：True 和 False;</li>
  <li>列表（list）：有序、可变的集合，如 [1, 2, 3];</li>
  <li>元组（tuple）：有序、不可变的集合，如 (1, 2, 3);</li>
  <li>集合（set）：无序、不重复的集合，如 {1, 2, 3};</li>
  <li>字典（dict）：无序的键值对集合，如 {‘name’: ‘Alice’, ‘age’: 30}。</li>
</ol>

<h3 id="script-structure">Script Structure</h3>
<p>在生产级别的 Python 编程中，一个 Python 脚本通常由以下部分构成：</p>

<p><strong>1. 导入模块</strong></p>

<p>在开头导入代码所需的模块，以扩展 Python 的功能和复用代码。例如：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">sys</span>
<span class="kn">from</span> <span class="n">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>
</code></pre></div></div>
<p>注：你可以在 <a href="https://docs.python.org/3/library/">Python 标准库</a>, <a href="https://pypi.org/">PyPI (Python Package Index)</a>, <a href="https://awesome-python.com/">Awesome Python</a> 找到丰富的 Python 库及其功能详情；也可以使用 <code class="language-plaintext highlighter-rouge">help(function_name)</code> 可以查看已导入方法内置的说明。</p>

<p><strong>2. 全局变量和常量定义</strong></p>

<p>定义全局变量和常量，用于在整个脚本中共享数据。例如：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">MAX_RETRIES</span> <span class="o">=</span> <span class="mi">3</span>
<span class="n">DEBUG_MODE</span> <span class="o">=</span> <span class="bp">True</span>
</code></pre></div></div>

<p><strong>3. 函数和类定义</strong></p>

<p>编写函数和类来组织代码逻辑和实现功能。函数用于封装可重复使用的代码块，类用于组织相关属性和方法。例如：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">calculate_area</span><span class="p">(</span><span class="n">radius</span><span class="p">):</span>
    <span class="k">return</span> <span class="mf">3.14</span> <span class="o">*</span> <span class="n">radius</span> <span class="o">**</span> <span class="mi">2</span>

<span class="k">class</span> <span class="nc">Person</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="n">self</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="n">age</span>
</code></pre></div></div>

<p>注：其中 <code class="language-plaintext highlighter-rouge">__init__</code> 是 Python 中的构造函数，用于在创建对象时初始化对象的属性。</p>

<p><strong>4. 主程序逻辑</strong></p>

<p>编写主要的程序逻辑，包括流程控制、数据处理、调用函数等。这部分代码通常位于脚本的最顶层，用于实现脚本的主要功能。例如：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="n">radius</span> <span class="o">=</span> <span class="mi">5</span>
    <span class="n">area</span> <span class="o">=</span> <span class="nf">calculate_area</span><span class="p">(</span><span class="n">radius</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">The area of the circle is: </span><span class="si">{</span><span class="n">area</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<p>注：<code class="language-plaintext highlighter-rouge">if __name__ == "__main__"</code> 被用来判断当前脚本是否作为主程序运行，加上这段代码可以防止在被其他脚本导入时执行了不必要的代码；当 Python 解释器运行一个脚本时，<code class="language-plaintext highlighter-rouge">__name__</code> 变量会被设置为 <code class="language-plaintext highlighter-rouge">"__main__"</code>，而如果该脚本被作为模块导入到其他脚本时，<code class="language-plaintext highlighter-rouge">__name__</code> 变量会被设置为模块的名称。</p>

<p><strong>5. 异常处理</strong></p>

<p>添加适当的异常处理机制，以处理可能出现的错误和异常情况，确保程序的稳定性和可靠性。例如：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span><span class="p">:</span>
    <span class="n">result</span> <span class="o">=</span> <span class="mi">10</span> <span class="o">/</span> <span class="mi">0</span>
<span class="k">except</span> <span class="nb">ZeroDivisionError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Error: Division by zero!</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>
<p>注：可以通过 <a href="https://docs.python.org/3/library/exceptions.html">Python 异常文档</a> 查看完整的 Exception 列表，也可以通过 <code class="language-plaintext highlighter-rouge">help(ExceptionNameError)</code> 查看特定异常的详细信息。</p>

<p><strong>6. 日志记录</strong></p>

<p>使用日志记录模块记录程序运行时的信息、警告和错误，以便进行故障排查和监控。例如：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">logging</span>
<span class="n">logging</span><span class="p">.</span><span class="nf">basicConfig</span><span class="p">(</span><span class="n">filename</span><span class="o">=</span><span class="sh">'</span><span class="s">app.log</span><span class="sh">'</span><span class="p">,</span> <span class="n">level</span><span class="o">=</span><span class="n">logging</span><span class="p">.</span><span class="n">INFO</span><span class="p">)</span>
<span class="n">logging</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="sh">'</span><span class="s">Program started</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="useful-libraries">Useful Libraries</h3>
<p><strong>1. <a href="https://docs.python.org/3/library/pdb.html">pdb</a> —— The Python Debugger</strong></p>

<p>pdb 是一个 python 中用于调试代码的模块，它的用法有两种，在代码行中插入：</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">pdb</span><span class="p">;</span> <span class="n">pdb</span><span class="p">.</span><span class="nf">set_trace</span><span class="p">()</span>
</code></pre></div></div>
<p>或者使用 python3.7 之后内置的 <code class="language-plaintext highlighter-rouge">breakpoint()</code></p>

<p><strong>Example: Debug Guessing Number</strong></p>

<p>random.randint(a, b) 返回一个 a &lt;= N &lt;= b 的随机整型，用 Python 执行下面的脚本得不到我们想要的结果。使用 breakpoint() 来寻找原因。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># import pdb
</span><span class="kn">from</span> <span class="n">random</span> <span class="kn">import</span> <span class="n">randint</span>

<span class="c1"># pdb.set_trace()
</span><span class="nf">breakpoint</span><span class="p">()</span>
<span class="n">answer</span> <span class="o">=</span> <span class="nf">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">n</span> <span class="o">=</span> <span class="nf">input</span><span class="p">(</span><span class="sh">"</span><span class="s">Guess: 0 or 1?</span><span class="sh">"</span><span class="p">)</span>
<span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="n">answer</span><span class="p">:</span>
    <span class="nf">breakpoint</span><span class="p">()</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Correct!</span><span class="sh">"</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="nf">breakpoint</span><span class="p">()</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Incorrect. The answer was </span><span class="si">{</span><span class="n">answer</span><span class="si">}</span><span class="s">.</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-&gt; answer <span class="o">=</span> randint<span class="o">(</span>0, 1<span class="o">)</span>
<span class="o">(</span>Pdb<span class="o">)</span> n
-&gt; n <span class="o">=</span> input<span class="o">(</span><span class="s2">"Guess: 0 or 1?"</span><span class="o">)</span>
<span class="o">(</span>Pdb<span class="o">)</span> <span class="o">!</span>answer
1
<span class="o">(</span>Pdb<span class="o">)</span> n
Guess: 0 or 1?1
-&gt; <span class="k">if </span>n <span class="o">==</span> answer:
<span class="o">(</span>Pdb<span class="o">)</span> <span class="k">continue</span>
-&gt; print<span class="o">(</span>f<span class="s2">"Incorrect. The answer was {answer}."</span><span class="o">)</span>
<span class="o">(</span>Pdb<span class="o">)</span> <span class="o">!(</span>n <span class="o">==</span> answer<span class="o">)</span>
False
<span class="o">(</span>Pdb<span class="o">)</span> <span class="o">!</span><span class="nb">type</span><span class="o">(</span>n<span class="o">)</span>
&lt;class <span class="s1">'str'</span><span class="o">&gt;</span>
<span class="o">(</span>Pdb<span class="o">)</span> <span class="o">!</span><span class="nb">type</span><span class="o">(</span>answer<span class="o">)</span>
&lt;class <span class="s1">'int'</span><span class="o">&gt;</span>
<span class="o">(</span>Pdb<span class="o">)</span> <span class="k">continue
</span>Incorrect. The answer was 1.
</code></pre></div></div>

<p>通过 debug 发现，比较时变量 n 和变量 answer 类型不同，将第 7 行代码按如下调整即可修复功能：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">n</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="nf">input</span><span class="p">(</span><span class="sh">"</span><span class="s">Guess: 0 or 1?</span><span class="sh">"</span><span class="p">))</span>
</code></pre></div></div>

<p>在 debug 模式下，键入 <code class="language-plaintext highlighter-rouge">help</code> 查看可以使用的所有命令，以下是开发中最常用的命令及其说明：</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">pdb Command</th>
      <th>Action</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">n or next</td>
      <td>Run the next line of code</td>
    </tr>
    <tr>
      <td style="text-align: left">s or step</td>
      <td>Step into current line(usually a function call)</td>
    </tr>
    <tr>
      <td style="text-align: left">r or return</td>
      <td>Return from the current function</td>
    </tr>
    <tr>
      <td style="text-align: left">l or list</td>
      <td>List the surrounding code lines</td>
    </tr>
    <tr>
      <td style="text-align: left">interact</td>
      <td>Starts an interactive Python interpreter</td>
    </tr>
    <tr>
      <td style="text-align: left">c or continue</td>
      <td>Continue running (until next breakpoint or exit)</td>
    </tr>
    <tr>
      <td style="text-align: left">b or break</td>
      <td>Set a breakpoint for a specific line or function</td>
    </tr>
    <tr>
      <td style="text-align: left">!</td>
      <td>Special prefix to say “run this as Python code”</td>
    </tr>
    <tr>
      <td style="text-align: left">pp</td>
      <td>Pretty-print the value of a Python expression</td>
    </tr>
  </tbody>
</table>

<p>To be continued…</p>]]></content><author><name></name></author><category term="go_big" /><summary type="html"><![CDATA[Background Python 作为一个高级编程语言 (high-level language)，它的主要工作是将用户编写的 Python 源代码解释成机器能理解的成字节码 (bytecode)，以便让机器执行指令。]]></summary></entry><entry><title type="html">no style, please!</title><link href="http://localhost:4000/blog/2024/09/15/no_style_please.html" rel="alternate" type="text/html" title="no style, please!" /><published>2024-09-15T00:00:00+08:00</published><updated>2024-09-15T00:00:00+08:00</updated><id>http://localhost:4000/blog/2024/09/15/no_style_please</id><content type="html" xml:base="http://localhost:4000/blog/2024/09/15/no_style_please.html"><![CDATA[<p>前面已经介绍了把个人网站部署在 Github Pages，并给 Github Page 配置定制化域名的流程。考虑到个人信息安全与审查风险，我将在 Aliyun 购买的域名转移到了 <a href="https://www.cloudflare.com/">Cloudflare</a>（可以在 <a href="https://lookup.icann.org/en">ICANN</a> 查看域名注册信息）。为了进一步加快网站部署流程，这里引入一个静态网站生成工具 Jekyll，以及 Jekyll 主题 no style, please! 的应用介绍。</p>

<h3 id="what-is-jekyll">What is Jekyll</h3>
<p><a href="https://jekyllrb.com/">Jekyll</a> 是一款简单的静态网站生成器。它可以将纯文本转化成静态网站，你只需要用自己习惯的标记语言如 Markdown 来编写博客文章，借由 Jekyll 预设模版内置的文章发布、分类、标签、归档等博客所需的功能，使创建和维护博客变得更加简单和高效。</p>

<p><a href="https://riggraz.dev/no-style-please/">no style, please!</a> 是一款几乎没有 CSS 样式的，快速生成，极简的 Jekyll 主题。</p>

<p>结合了这套组件，网站的发布和维护变得非常简单，网站所有者只需专注于输出内容，通过几个简单的命令行，文章就自动部署到网站。</p>

<p>下面来一步一步演示它是如何实现的。</p>

<h3 id="installation">Installation</h3>
<p>Jekyll 是一个 Ruby 项目，安装 Jekyll 首先需要 Ruby 的开发环境。</p>

<h4 id="install-chruby-and-ruby-install-with-homebrew">Install chruby and ruby-install with Homebrew</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>chruby ruby-install xz
</code></pre></div></div>

<h4 id="install-the-latest-stable-version-of-ruby">Install the latest stable version of Ruby</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ruby-install ruby 3.1.3
</code></pre></div></div>

<h4 id="configure-your-shell-to-automatically-use-chruby">Configure your shell to automatically use chruby</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s2">"source </span><span class="si">$(</span>brew <span class="nt">--prefix</span><span class="si">)</span><span class="s2">/opt/chruby/share/chruby/chruby.sh"</span> <span class="o">&gt;&gt;</span> ~/.zshrc
<span class="nb">echo</span> <span class="s2">"source </span><span class="si">$(</span>brew <span class="nt">--prefix</span><span class="si">)</span><span class="s2">/opt/chruby/share/chruby/auto.sh"</span> <span class="o">&gt;&gt;</span> ~/.zshrc
<span class="nb">echo</span> <span class="s2">"chruby ruby-3.1.3"</span> <span class="o">&gt;&gt;</span> ~/.zshrc <span class="c"># run 'chruby' to see actual version</span>
</code></pre></div></div>

<h4 id="install-jekyll">Install Jekyll</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem <span class="nb">install </span>jekyll bundler
</code></pre></div></div>

<h4 id="create-a-new-gemfile">Create a new Gemfile</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle init
</code></pre></div></div>

<h4 id="edit-gemfile">Edit Gemfile</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem <span class="s2">"jekyll"</span>, <span class="s2">"~&gt; 4.3.3"</span>
<span class="c"># Change default Jekyll theme to no-style-please</span>
gem <span class="s2">"no-style-please"</span>
</code></pre></div></div>

<p>Run <code class="language-plaintext highlighter-rouge">bundle</code> to install jekyll for your project.</p>

<h3 id="create-a-site">Create a site</h3>
<p>在 _data, _includes, _layouts 中预设网站模版样式，将 Markdown 格式的文件放入指定的 _posts 路径。</p>

<h3 id="build-your-site">Build your site</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle <span class="nb">exec </span>jekyll serve
</code></pre></div></div>

<p>通过 <code class="language-plaintext highlighter-rouge">localhost:4000</code> 预览生成后的网站，确保无误后将生成后的网站内容推到 Github 触发 Github Pages 部署，至此网站发布成功。</p>]]></content><author><name></name></author><category term="blog" /><summary type="html"><![CDATA[前面已经介绍了把个人网站部署在 Github Pages，并给 Github Page 配置定制化域名的流程。考虑到个人信息安全与审查风险，我将在 Aliyun 购买的域名转移到了 Cloudflare（可以在 ICANN 查看域名注册信息）。为了进一步加快网站部署流程，这里引入一个静态网站生成工具 Jekyll，以及 Jekyll 主题 no style, please! 的应用介绍。]]></summary></entry></feed>